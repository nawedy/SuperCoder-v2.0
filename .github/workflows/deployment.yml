name: SuperCode Deployment Pipeline

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint code
        run: npm run lint
        
      - name: Run unit tests
        run: npm test
        
      - name: Build application
        run: npm run build
        
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Run performance benchmarks
        run: npm run benchmark -- --tag fast
        
      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            out/
            reports/

  package:
    name: Package Application
    needs: build
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'
          cache: 'npm'
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build electron package
        run: npm run package:${{ matrix.platform }}
        
      - name: Upload packages
        uses: actions/upload-artifact@v3
        with:
          name: supercode-${{ matrix.platform }}
          path: dist/

  deploy-staging:
    name: Deploy to Staging
    needs: package
    runs-on: ubuntu-latest
    if: (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch') && (github.event.inputs.environment == 'staging' || github.event.inputs.environment == '')
    environment: staging
    
    steps:
      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          path: packages/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          
      - name: Deploy to S3
        run: |
          aws s3 sync packages/ s3://supercode-staging/releases/ --acl public-read
          
      - name: Update version manifest
        run: |
          echo "{\"version\":\"${GITHUB_REF#refs/tags/}\",\"releaseDate\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}" > version.json
          aws s3 cp version.json s3://supercode-staging/version.json --acl public-read
          
      - name: Post-deployment verification
        run: |
          curl -s https://supercode-staging.s3.amazonaws.com/version.json
          echo "Deployed successfully to staging environment"

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          path: packages/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          
      - name: Deploy to S3
        run: |
          aws s3 sync packages/ s3://supercode-production/releases/ --acl public-read
          
      - name: Update version manifest
        run: |
          echo "{\"version\":\"${GITHUB_REF#refs/tags/}\",\"releaseDate\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}" > version.json
          aws s3 cp version.json s3://supercode-production/version.json --acl public-read
          
      - name: Post-deployment verification
        run: |
          curl -s https://supercode-production.s3.amazonaws.com/version.json
          echo "Deployed successfully to production environment"
      
  notify:
    name: Send Deployment Notifications
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: SuperCode Deployment Status
          SLACK_MESSAGE: "Environment: ${{ github.event.inputs.environment || 'staging' }} - Status: ${{ job.status }}" 